# ansible-playbook -i inventory.ini playbook.yml
---
- name: My first play
  hosts: localhost
  tasks:
  - name: Ping my hosts
    ansible.builtin.ping:
  - name: Print message
    ansible.builtin.debug:
      msg: Hello world


- name: Homebrew Installs 
  hosts: localhost
  tasks:
  - name: Brew Installs 
    community.general.homebrew:
      name: "{{ item }}"
      state: present
    with_list:
    - tmux 
    - neovim
    - awscli
    - fzf
    - git
    - git-lfs
    - jq
    - pipx
    - mise
    - ripgrep
    when: ansible_facts["os_family"] == "Darwin"


- name: Linux Installs
  hosts: localhost
  tasks:
  - name: Yum Installs
    ansible.builtin.yum:
      name:
      - tmux
      - awscli
      - git
      - git-lfs
      - jq
      state: present
    when: ansible_facts["os_family"] == "RedHat"
  - name: Install FZF
    ansible.builtin.git:
      repo: https://github.com/junegunn/fzf.git
      dest: build/fzf
    environment:
      GIT_TERMINAL_PROMPT: 0
    when: ansible_facts["os_family"] == "RedHat"
  - name: Change the working directory to somedir/ before executing the command
    ansible.builtin.shell: install >> install.txt
    args:
      chdir: build/fzf
    when: ansible_facts["os_family"] == "RedHat"
  - name: Fetch mise
    ansible.builtin.uri:
      url: https://mise.run
      return_content: yes
    register: mise_installer
    when: ansible_facts["os_family"] == "RedHat"
  - name: Run mise installer
    ansible.builtin.shell:
      cmd: sh -s -- -y
      stdin: "{{ mise_installer.content }}"
    when: ansible_facts["os_family"] == "RedHat"


- name: Pipx Installs
  hosts: localhost
  tasks:
  - name: Install pipx tools
    community.general.pipx:
      executable: pipx
      name: "{{ item }}"
      state: present
    with_list:
      - poetry 
      - black 
      - isort


- name: Setup Home Environment
  hosts: localhost
  tasks:
  - name: Include main vars
    ansible.builtin.include_vars:
      file: vars.yml
  - name: Setup env dotfile links
    ansible.builtin.file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ username }}"
      mode: "0755"
      state: link
    loop:
      - { src: "{{ playbook_dir }}/env/zshrc", dest: "{{ home }}/.zshrc" }
    when: ansible_facts["os_family"] == "Darwin"


- name: Setup Config
  hosts: localhost
  tasks:
  - name: Find all files in env/config
    ansible.builtin.find:
      paths: "{{ playbook_dir }}/env/config"
      file_type: any
    register: config
  - name: Create symlinks to ~/.config
    ansible.builtin.file:
      src: "{{ item.path }}"
      path: "{{ home }}/.config/{{ item.path | basename }}"
      owner: "{{ username }}"
      mode: "0755"
      state: link
    with_items: "{{ config.files }}"


- name: Setup Share
  hosts: localhost
  tasks:
  - name: Find all files in env/local/share
    ansible.builtin.find:
      paths: "{{ playbook_dir }}/env/local/share"
      file_type: file
    register: bin
  - name: Create symlinks to ~/.local/share
    ansible.builtin.file:
      src: "{{ item.path }}"
      path: "{{ home }}/.local/share/{{ item.path | basename }}"
      owner: "{{ username }}"
      state: link
    with_items: "{{ bin.files }}"


- name: Setup Bin
  hosts: localhost
  tasks:
  - name: Find all files in env/local/bin
    ansible.builtin.find:
      paths: "{{ playbook_dir }}/env/local/bin"
      file_type: file
    register: bin
  - name: Create symlinks to ~/.local/bin
    ansible.builtin.file:
      src: "{{ item.path }}"
      path: "{{ home }}/.local/bin/{{ item.path | basename }}"
      owner: "{{ username }}"
      state: link
    with_items: "{{ bin.files }}"


- name: Update Homebrew
  hosts: localhost
  tasks:
  - name: Update
    community.general.homebrew:
      update_homebrew: true
      upgrade_all: true
    when: ansible_facts["os_family"] == "Darwin"

