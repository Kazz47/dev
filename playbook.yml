# ansible-playbook -i inventory.ini playbook.yml
---
- name: My first play
  hosts: localhost
  tasks:
  - name: Ping my hosts
    ansible.builtin.ping:
  - name: Print message
    ansible.builtin.debug:
      msg: Hello world


- name: Homebrew Installs 
  hosts: localhost
  tasks:
  - name: Brew Installs 
    community.general.homebrew:
      name: "{{ item }}"
      state: present
    with_list:
    - tmux 
    - neovim
    - awscli
    - fzf
    - git
    - git-lfs
    - bat
    - jq
    - yq
    - pipx
    - mise
    - ripgrep
    - tokei
    - luarocks
    - wget
    - fd
    - xh
    - zoxide
    - starship
    - koekeishiya/formulae/yabai
    - koekeishiya/formulae/skhd
    when: ansible_facts["os_family"] == "Darwin"


- name: Linux Installs
  hosts: localhost
  tasks:
  - name: Include main vars
    ansible.builtin.include_vars:
      file: vars.yml
  - name: Yum Installs
    ansible.builtin.yum:
      name:
      - tmux
      - awscli
      - git
      - git-lfs
      - jq
      - libevent-devel
      state: present
    when: ansible_facts["os_family"] == "RedHat"
  - name: Download fzf
    ansible.builtin.git:
      repo: https://github.com/junegunn/fzf.git
      dest: build/fzf
    environment:
      GIT_TERMINAL_PROMPT: 0
    when: ansible_facts["os_family"] == "RedHat"
  - name: Install fzf
    ansible.builtin.shell: ./install >> install.txt
    args:
      chdir: build/fzf
    when: ansible_facts["os_family"] == "RedHat"
  - name: Fetch ripgrep
    ansible.builtin.git:
      repo: https://github.com/BurntSushi/ripgrep
      dest: build/ripgrep
    environment:
      GIT_TERMINAL_PROMPT: 0
    when: ansible_facts["os_family"] == "RedHat"
  - name: Install ripgrep
    ansible.builtin.shell: cargo build --release
    args:
      chdir: build/ripgrep
    when: ansible_facts["os_family"] == "RedHat"
  - name: Copy ripgrep to bin
    ansible.builtin.command:
      cmd: "cp -r target/release/rg ../../env/local/bin/"
    args:
      chdir: build/ripgrep
    when: ansible_facts["os_family"] == "RedHat"
  - name: Fetch mise
    ansible.builtin.uri:
      url: https://mise.run
      return_content: yes
    register: mise_installer
    when: ansible_facts["os_family"] == "RedHat"
  - name: Run mise installer
    ansible.builtin.shell:
      cmd: sh -s -- -y
      stdin: "{{ mise_installer.content }}"
    when: ansible_facts["os_family"] == "RedHat"
  - name: Download tmux
    ansible.builtin.git:
      repo: https://github.com/tmux/tmux.git
      dest: build/tmux
    environment:
      GIT_TERMINAL_PROMPT: 0
    when: ansible_facts["os_family"] == "RedHat"
  - name: Install tmux
    ansible.builtin.command:
      cmd: "{{ item }}"
    args:
      chdir: build/tmux
    with_items:
    - sh autogen.sh
    - ./configure --prefix {{ home }}/.local
    - make
    - make install
    when: ansible_facts["os_family"] == "RedHat"
  - name: Download bat
    ansible.builtin.git:
      repo: https://github.com/sharkdp/bat.git
      dest: build/bat
    environment:
      GIT_TERMINAL_PROMPT: 0
    when: ansible_facts["os_family"] == "RedHat"
  - name: Install bat
    ansible.builtin.command:
      cmd: "{{ item }}"
    args:
      chdir: build/bat
    with_items:
    - cargo install --locked bat
    when: ansible_facts["os_family"] == "RedHat"
  - name: Download xh
    ansible.builtin.git:
      repo: https://github.com/ducaale/xh.git
      dest: build/xh
    environment:
      GIT_TERMINAL_PROMPT: 0
    when: ansible_facts["os_family"] == "RedHat"
  - name: Install xh
    ansible.builtin.command:
      cmd: "{{ item }}"
    args:
      chdir: build/xh
    with_items:
    - cargo install --locked xh
    when: ansible_facts["os_family"] == "RedHat"


- name: Mise Installs
  hosts: localhost
  tasks:
  - name: Install NPM
    ansible.builtin.command:
      cmd: "mise use -g node"
    when: ansible_facts["os_family"] == "Darwin"
  - name: Install Python
    ansible.builtin.command:
      cmd: "mise use -g python"


- name: Pipx Installs
  hosts: localhost
  tasks:
  - name: Install pipx tools
    community.general.pipx:
      executable: pipx
      name: "{{ item }}"
      state: present
    with_list:
      - poetry 
      - black 
      - isort


- name: Setup Home Environment
  hosts: localhost
  tasks:
  - name: Include main vars
    ansible.builtin.include_vars:
      file: vars.yml
  - name: Remove OSX only dotfiles
    ansible.builtin.file:
      path: "{{ item }}"
      state: absent
    loop:
      - "{{ home }}/.zshrc"
    when: ansible_facts["os_family"] == "Darwin"
  - name: Setup OSX only env dotfile links
    ansible.builtin.file:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: "{{ username }}"
      mode: "0755"
      state: link
    loop:
      - { src: "{{ playbook_dir }}/env/zshrc", dest: "{{ home }}/.zshrc" }
    when: ansible_facts["os_family"] == "Darwin"


- name: Setup Config
  hosts: localhost
  tasks:
  - name: Find all files in env/config
    ansible.builtin.find:
      paths: "{{ playbook_dir }}/env/config"
      file_type: any
    register: config
  - name: Create symlinks to ~/.config
    ansible.builtin.file:
      src: "{{ item.path }}"
      path: "{{ home }}/.config/{{ item.path | basename }}"
      owner: "{{ username }}"
      mode: "0755"
      state: link
    with_items: "{{ config.files }}"


- name: Setup Share
  hosts: localhost
  tasks:
  - name: Find all files in env/local/share
    ansible.builtin.find:
      paths: "{{ playbook_dir }}/env/local/share"
      file_type: file
    register: bin
  - name: Create symlinks to ~/.local/share
    ansible.builtin.file:
      src: "{{ item.path }}"
      path: "{{ home }}/.local/share/{{ item.path | basename }}"
      owner: "{{ username }}"
      state: link
    with_items: "{{ bin.files }}"


- name: Setup Bin
  hosts: localhost
  tasks:
  - name: Find all files in env/local/bin
    ansible.builtin.find:
      paths: "{{ playbook_dir }}/env/local/bin"
      file_type: file
    register: bin
  - name: Create symlinks to ~/.local/bin
    ansible.builtin.file:
      src: "{{ item.path }}"
      path: "{{ home }}/.local/bin/{{ item.path | basename }}"
      owner: "{{ username }}"
      state: link
    with_items: "{{ bin.files }}"


- name: Update Homebrew
  hosts: localhost
  tasks:
  - name: Update
    community.general.homebrew:
      update_homebrew: true
      upgrade_all: true
    when: ansible_facts["os_family"] == "Darwin"


- name: Rust
  hosts: localhost
  tags:
    - rust
  tasks:
  - name: Check if cargo is installed
    ansible.builtin.shell: command -v cargo
    register: cargo_exists
    ignore_errors: yes
  - name: Download Installer
    when: cargo_exists is failed
    get_url:
      url: https://sh.rustup.rs
      dest: /tmp/sh.rustup.rs
      mode: '0755'
      force: 'yes'
  - name: Install Cargo
    when: cargo_exists is failed
    ansible.builtin.shell: /tmp/sh.rustup.rs -y


- name: Alacritty
  hosts: localhost
  tasks:
  - name: Download Alacrity
    ansible.builtin.git:
      repo: https://github.com/alacritty/alacritty.git
      dest: build/alacritty
    when: ansible_facts["os_family"] == "Darwin"
  - name: Build Alacrity
    ansible.builtin.command:
      cmd: "cargo build --release"
    args:
      chdir: build/alacritty
    when: ansible_facts["os_family"] == "Darwin"
  - name: Package App
    ansible.builtin.command:
      cmd: "make app"
    args:
      chdir: build/alacritty
    when: ansible_facts["os_family"] == "Darwin"
  - name: Copy to Applications
    ansible.builtin.command:
      cmd: "cp -r target/release/osx/Alacritty.app /Applications/"
    args:
      chdir: build/alacritty
    when: ansible_facts["os_family"] == "Darwin"
